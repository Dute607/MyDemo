package com.kerong.jdbctest.demo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.Date;
import java.util.UUID;

public class Copy {

    private static String year;
    private static String month;
    private static String repId;

    public static void main(String[] args) {
        System.out.println(new Date());
        File file = new File("D:\\Files\\WorkFiles\\Kerong\\202007_GF0100.txt");
        // 获取年份月份和编号
        getDate(file);
        // 生成唯一id
        UUID uuid = UUID.randomUUID();
        // 处理同步数据
        readFile(file,uuid);
        System.out.println(new Date());
    }

    // 获取年份月份和编号
    public static void getDate(File file){
        String name = file.getName();
        String[] s1 = name.split("\\.");
        String[] s2 = s1[0].split("_");
        year = s2[0].substring(0, 4);
        month = s2[0].substring(4, 6);
        repId = s2[1];
    }

    // 读取文件，获取数据
    public static void readFile(File file,UUID uuid){
        Connection connection = null;
        PreparedStatement ps = null;
        ResultSet resultSet = null;
        int times = 0;
        String sql1 = "SELECT * FROM Xxtj_etl_info WHERE is_max_time = 1 AND year = ? AND Term = ? AND Child_rep_id = ?";
        String sql2 = "UPDATE Xxtj_etl_info SET is_max_time = 0 WHERE is_max_time = 1 AND year = ? AND Term = ? AND Child_rep_id = ?";
        String sql3 = "INSERT INTO Xxtj_etl_info(Xxtj_etl_info_id,year,Term,Child_rep_id,Version_id,Data_range_id,Freq_id,is_max_time,times) values" +
                "(?,?,?,?,null,1,null,1,?)";
        String sql4 = "INSERT INTO xxtj_etl_data(Xxtj_etl_info_id,year,Term,Org_id,Child_rep_id,Version_id,Data_range_id,Freq_id,Cell_name,Cell_value) values" +
                "(?,?,?,?,?,null,1,null,?,?)";
        String s = null;
        BufferedReader br = null;
        int count = 0;
        String[] arr = null;
        try {
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl","scott","orcl");
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql1);
            ps.setString(1,year);
            ps.setString(2,month);
            ps.setString(3,repId);
            resultSet = ps.executeQuery();
            while(resultSet.next()){
                times = resultSet.getInt("times");
            }
            times ++;

            ps = connection.prepareStatement(sql2);
            ps.setString(1,year);
            ps.setString(2,month);
            ps.setString(3,repId);
            ps.executeUpdate();

            ps = connection.prepareStatement(sql3);
            ps.setString(1,uuid.toString());
            ps.setString(2,year);
            ps.setString(3,month);
            ps.setString(4,repId);
            ps.setInt(5,times);
            ps.executeUpdate();

            br = new BufferedReader(new FileReader(file));
            ps = connection.prepareStatement(sql4);
            while((s = br.readLine()) != null){
                arr = s.split("\\|");
                ps.setString(1,uuid.toString());
                ps.setString(2,year);
                ps.setString(3,month);
                ps.setString(4,arr[0]);
                ps.setString(5,arr[1]);
                ps.setString(6,arr[2]);
                ps.setString(7,arr[3]);
                ps.addBatch();
                count ++;
                if(count % 10000 == 0){
                    ps.executeBatch();
                    count = 0;
                    ps.clearBatch();
                }
            }
            ps.executeBatch();
            connection.commit();
        } catch (Exception e) {
            if (connection != null){
                try {
                    connection.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
            e.printStackTrace();
        } finally {
            if(br != null){
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            close(resultSet,ps,connection);
        }
    }

    // 关闭资源
    public static void close(ResultSet resultSet,PreparedStatement ps, Connection connection){
        if (resultSet != null){
            try {
                resultSet.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if(ps != null){
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if(connection != null){
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
